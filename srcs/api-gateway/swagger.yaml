openapi: 3.0.0
info:
  title: API documentation
  version: 1.0.0
components:
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
          description: The movie's ID.
        title:
          type: string
          description: The movie's title.
        description:
          type: string
          description: The movie's description.
    Order:
      type: object
      properties:
        id:
          type: integer
          description: The odrer's ID.
        user_id:
          type: string
          description: The id of the user making the order.
        number_of_items:
          type: string
          description: The number of items included in the order.
        total_amount:
          type: string
          description: The total cost of the order.

paths:
  /api/movies:
    get:
      summary: Get a list of movies
      description: Returns a list of movies.
      parameters:
        - name: title
          in: query
          required: false
          description: The title of the movie to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              example:
                [
                  {
                    id: 1,
                    title: "test title",
                    description: "test description",
                  },
                ]
        "500":
          description: A server internal error

    post:
      summary: Create a new movie
      description: Creates a new movie.
      requestBody:
        content:
          application/json:
            example: { title: "new title", description: "new description" }
      responses:
        "201":
          description: Movie created successfully
          content:
            application/json:
              example:
                { id: 1, title: "new title", description: "new description" }
        "500":
          description: A server internal error

  /api/movies/{id}:
    get:
      summary: Get movie by ID
      description: Returns a movie by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the movie to retrieve.
          schema:
            type: integer
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              example:
                { id: 1, title: "test title", description: "test description" }
        "404":
          description: Movie not found

    put:
      summary: Update movie by ID
      description: Updates a user by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the movie to update.
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            example: { title: "updated title" }
      responses:
        "200":
          description: Movie updated successfully
          content:
            application/json:
              example:
                {
                  id: 1,
                  title: "updated title",
                  description: "test description",
                }
        "404":
          description: Movie not found

    delete:
      summary: Delete movie by ID
      description: Deletes a user by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the movie to delete.
          schema:
            type: integer
      responses:
        "204":
          description: Movie deleted successfully
        "404":
          description: Movie not found

  /api/billing:
    post:
      summary: Create a new order
      description: Creates a new order.
      requestBody:
        content:
          application/json:
            example:
              { "user_id": "3", "number_of_items": "5", "total_amount": "180" }
      responses:
        "201":
          description: Movie created successfully
